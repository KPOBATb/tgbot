from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Filter
from aiogram.filters import Command
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram import Bot
from aiogram.types.input_file import FSInputFile

import fnmatch

import os

from vacancy import vacancy_show,vacancy_name,vacany_id,vacanacy_vacanacy,city,vacancy_cool
from resume import resume_add,resume_show,n_w_city,resume_sub_id,resume_show_2
from kb import MenuKeybord,Subject_of_rfKeybord,vacancy_typeKeybord,YesNoKeybord,GoBackKeybord,DownloadConfirmationKeybord,Need_worker_subjectKeybord
#,CityKeybord

# from vacancy import vacancies_by_city,shosen_vacancy_vy_id,vokancy_by_id
#s_of_rf_ —Å—É–±—ä–µ–∫—Ç
#s_c_ –≥–æ—Ä–æ–¥
#v_t_ —Ç–∏–ø
#c_v_ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è 

class Choice:
    def __init__(self):
        self.choice = {}
    def ap(self,key,key_two,value):
        if key not in self.choice:
            self.choice[key]={}
            self.choice[key][key_two]=value
        if key in self.choice:
            self.choice[key][key_two]=value
    def show(self,key):
        return self.choice[key]
    def clear(self,key):
        self.choice[key]={}

class Form(StatesGroup):
    file1 = State()
    file2 = State()
    file3 = State()
    file4 = State()
    fileload = State()

router = Router()
ch=Choice()
ch_resume=Choice()



@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüòä \n–Ø - –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –û–ê–û ¬´–†–ñ–î¬ª - —Å–∞–º–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è —Å—Ç—Ä–∞–Ω—ã! \n ',reply_markup=MenuKeybord.as_markup())

@router.callback_query(lambda query: query.data == "menu")
async def callback_data_handler(callback_query: CallbackQuery):
        await callback_query.bot.send_message(callback_query.from_user.id,'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüòä \n–Ø - –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –û–ê–û ¬´–†–ñ–î¬ª - —Å–∞–º–æ–≥–æ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è —Å—Ç—Ä–∞–Ω—ã!',reply_markup=MenuKeybord.as_markup() )

#Need vacancy
#–≤—ã–±–æ—Ä —Å—É–±—ä–µ–∫—Ç–∞ 
@router.callback_query(lambda query: query.data == "need_vacancy")
async def callback_data_handler(callback_query: CallbackQuery):
        await callback_query.bot.send_message(callback_query.from_user.id,'–°–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Å—É–±—ä–µ–∫—Ç–µ –†–§ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏–∏?',reply_markup=Subject_of_rfKeybord.as_markup() )
#–≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ 
@router.callback_query(lambda query: query.data[0:len('s_of_rf_')] == "s_of_rf_")
async def callback_data_handler(callback_query: CallbackQuery):
        ch.ap(callback_query.from_user.id,'s_of_rf_',callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
        CityKeybord = InlineKeyboardBuilder()
        for i in city[ch.show(callback_query.from_user.id)['s_of_rf_']]:
            CityKeybord.add(types.InlineKeyboardButton(text=f"{i}",
            callback_data=f"s_c_{i}"))
        CityKeybord.adjust(2)
        await callback_query.bot.send_message(callback_query.from_user.id,'–°–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏–∏?',reply_markup=CityKeybord.as_markup() )
    
#–≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
@router.callback_query(lambda query: query.data[0:len('s_c_')] == "s_c_")
async def callback_data_handler(callback_query: CallbackQuery):
        ch.ap(callback_query.from_user.id,'s_c_',callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
        print(ch.show(callback_query.from_user.id))
        await callback_query.bot.send_message(callback_query.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏',reply_markup=vacancy_typeKeybord.as_markup() )
    
#–≤—ã–≤–æ–¥ –≤—ã–±—Ä–∞—ã–Ω–Ω—Ö –≤–∞–∫–∞–Ω—Å–∏–π  
@router.callback_query(lambda query: query.data[0:len('v_t_')] == "v_t_")
async def callback_data_handler(callback_query: CallbackQuery):
        ch.ap(callback_query.from_user.id,'v_t_',callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
        Keybord = InlineKeyboardBuilder()
        vacancy = vacancy_name(ch.show(callback_query.from_user.id)['s_of_rf_'],ch.show(callback_query.from_user.id)['s_c_'],ch.show(callback_query.from_user.id)['v_t_'])
        if len(vacancy) != 0:
            for i in range(len(vacancy)):
                Keybord.add(types.InlineKeyboardButton(text=f"{vacancy[i]}",
                callback_data=f"c_v_{vacany_id(vacancy[i])}"))
            Keybord.add(types.InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="menu"))
            Keybord.adjust(1)
            await callback_query.bot.send_message(callback_query.from_user.id,'–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –≤—ã–±–æ—Ä–∫—É –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –û–ê–û ¬´–†–ñ–î¬ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —ç—Ç–æ —Ü–µ–Ω–∏—Ç –∏ –Ω–∞–¥–µ–µ—Ç—Å—è —É–≤–∏–¥–µ—Ç—å –í–∞—Å –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤üòä',reply_markup=Keybord.as_markup() )        
        else:
            await callback_query.bot.send_message(callback_query.from_user.id,'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –û–ê–û ¬´–†–ñ–î¬ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—èüòä',reply_markup=GoBackKeybord.as_markup() )
#–≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
@router.callback_query(lambda query: query.data[0:len('c_v_')] == "c_v_")
async def callback_data_handler(callback_query: CallbackQuery):
    name = vacanacy_vacanacy(int(callback_query.data[4:]))
    vancy = vacancy_show(ch.show(callback_query.from_user.id)['s_of_rf_'],ch.show(callback_query.from_user.id)['s_c_'],ch.show(callback_query.from_user.id)['v_t_'],name)
    #–º–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—É—Ç–±—É–¥–µ—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ –ø–æ—Ç–æ–º –¥–æ–¥–µ–ª–∞—Ç—å
    await callback_query.bot.send_message(callback_query.from_user.id,f'{vacancy_cool(vancy)}',reply_markup=GoBackKeybord.as_markup() )


#see resume
#–≤—ã–±–æ—Ä —Å—É–±—ä–µ–∫—Ç–∞
@router.callback_query(lambda query: query.data == "need_worker")
async def callback_data_handler(callback_query: CallbackQuery):
        await callback_query.bot.send_message(callback_query.from_user.id,'–°–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Å—É–±—ä–µ–∫—Ç–µ –†–§ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏–∏?',reply_markup=Need_worker_subjectKeybord.as_markup() )

#–≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ 
@router.callback_query(lambda query: query.data[0:len('n_w_s_of_rf_')] == "n_w_s_of_rf_")
async def callback_data_handler(callback_query: CallbackQuery):
        ch_resume.ap(callback_query.from_user.id,'n_w_s_of_rf_',callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
        # print(ch_resume.show(callback_query.from_user.id))
        CityKeybord = InlineKeyboardBuilder()
        for i in n_w_city[int(ch_resume.show(callback_query.from_user.id)['n_w_s_of_rf_'])]:
            CityKeybord.add(types.InlineKeyboardButton(text=f"{i}",
            callback_data=f"n_w_s_c_{i}"))
        CityKeybord.adjust(2)
        await callback_query.bot.send_message(callback_query.from_user.id,'–°–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏–∏?',reply_markup=CityKeybord.as_markup() )

#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Å—É–±—ä–µ–∫—Ç–∞ —Ä—Ñ 
@router.callback_query(lambda query: query.data[0:len('n_w_s_c_')] == "n_w_s_c_")
async def callback_data_handler(callback_query: CallbackQuery):
        ch_resume.ap(callback_query.from_user.id,'n_w_s_c_',callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
        await callback_query.bot.send_message(callback_query.from_user.id,'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Å—É–±—ä–µ–∫—Ç–∞ –†–§ ',reply_markup=YesNoKeybord.as_markup() )
#–≤—ã–≤–æ–¥ –≤—ã–±—Ä–∞—ã–Ω–Ω—Ö —Ä–µ–∑—é–º–µ
@router.callback_query(lambda query: query.data == "yes")
async def callback_data_handler(callback_query: CallbackQuery):
    resumes = resume_show_2(ch_resume.show(callback_query.from_user.id)['n_w_s_of_rf_'],ch_resume.show(callback_query.from_user.id)['n_w_s_c_'])
    print(ch_resume.show(callback_query.from_user.id)['n_w_s_of_rf_'],ch_resume.show(callback_query.from_user.id)['n_w_s_c_'])
    resumesKeybord = InlineKeyboardBuilder()
    print(resumes.values())
    for i in resumes.values():
        print(i)
        print(i[0])
        resumesKeybord.add(types.InlineKeyboardButton(text=f"{i[0]}",callback_data=f"load_resume_{i[0]}"))
    await callback_query.bot.send_message(callback_query.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ',reply_markup=resumesKeybord.as_markup())


@router.callback_query(lambda query: query.data[0:len('load_resume_')] == "load_resume_")
async def callback_data_handler(callback_query: CallbackQuery,bot : Bot):
    print(callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):])
    document = FSInputFile(f'{callback_query.data[len(callback_query.data)-callback_query.data[::-1].index("_"):]}')
    await bot.send_document(callback_query.from_user.id, document)
    # await callback_query.bot.send_message(callback_query.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ',reply_markup=resumesKeybord.as_markup())


#load resume
@router.callback_query(lambda query: query.data == "load_resume")
async def callback_data_handler(callback_query: CallbackQuery,state: FSMContext):
    await callback_query.bot.send_message(callback_query.from_user.id,'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ docx/pdf —Ñ–æ—Ä–º–∞—Ç—ã')
    await state.set_state(Form.file1)

@router.message(Form.file1)
async def file_test(message: types.Message, state: FSMContext,bot: Bot):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    ch_resume.ap(message.from_user.id,'file_path',file_path)
    if fnmatch.fnmatch(file_path, '*.pdf') or fnmatch.fnmatch(file_path, '*.docx'):
        # await message.answer(f"—Ñ–∞–π–ª {file_path} –∑–∞–≥—Ä—É–∂–µ–Ω")
        await message.answer(f"–≤–≤–µ–¥–∏—Ç–µ –§–ò–û")
        await state.set_state(Form.file2)
    else:
        await message.answer(f"–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É")

@router.message(Form.file2)
async def file_test(message: types.Message, state: FSMContext,bot: Bot):
    fio=message.text
    ch_resume.ap(message.from_user.id,'fio',fio)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ì–æ—Ä–æ–¥")
    await state.set_state(Form.file3)

@router.message(Form.file3)
async def file_test(message: types.Message, state: FSMContext,bot: Bot):
    city=message.text
    ch_resume.ap(message.from_user.id,'city',city)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –°—É–±—ä–µ–∫—Ç —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏")
    await state.set_state(Form.fileload)

@router.message(Form.fileload)
async def file_load(message: types.Message, state: FSMContext,bot: Bot):
    Subject_of_rf=message.text
    ch_resume.ap(message.from_user.id,'Subject_of_rf',Subject_of_rf)
    fio=ch_resume.show(message.from_user.id)['fio']
    city=ch_resume.show(message.from_user.id)['city']
    Subject_of_rf=ch_resume.show(message.from_user.id)['Subject_of_rf']
    file_path = ch_resume.show(message.from_user.id)['file_path']
    if fnmatch.fnmatch(file_path, '*.pdf'):  
        resume_add(message.from_user.id,f"{fio}.pdf",city,Subject_of_rf)
        await bot.download_file(file_path, f"{fio}.pdf")
        await message.answer(f"–§–∞–π–ª {fio}.pdf –∑–∞–≥—Ä—É–∂–µ–Ω ",reply_markup=GoBackKeybord.as_markup())
    elif fnmatch.fnmatch(file_path, '*.docx'):
        resume_add(message.from_user.id,f"{fio}.pdf",city,Subject_of_rf)
        await bot.download_file(file_path, f"{fio}.docx")
        await message.answer(f"–§–∞–π–ª {fio}.docx –∑–∞–≥—Ä—É–∂–µ–Ω",reply_markup=GoBackKeybord.as_markup())
